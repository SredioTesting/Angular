/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

 /**
  * This file is pure JavaScript because we want to avoid any dependency or build step
  * to it. It's just simple (and zen-ier).
  *
  * This file wraps around quicktype and can do one of two things;
  * 
  * `node quicktype_runner.js <in_path> <out_path>`
  *   Reads the in path and outputs the TS file at the out_path.
  * 
  * Using `-` as the out_path will output on STDOUT instead of a file.
  */

// Imports.
const fs = require('fs');
const path = require('path');
const qtCore = require('quicktype-core');
const tempRoot = process.env['BAZEL_TMPDIR'] || require('os').tmpdir();

// Header to add to all files.
const header = `
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

 // THIS FILE IS AUTOMATICALLY GENERATED IN BAZEL. TO UPDATE THIS FILE YOU NEED TO CHANGE THE
 // CORRESPONDING JSON SCHEMA FILE, THEN RUN BAZEL.

`.replace(/^\n/m, '');  // Remove the first \n, it's in the constant because formatting is 👍.

// Footer to add to all files.
const footer = ``;

/**
 * The simplest Node JSONSchemaStore implementation we can build which supports our custom protocol.
 * Supports reading from ng-cli addresses, valid URLs and files (absolute).
 */
class FetchingJSONSchemaStore extends qtCore.JSONSchemaStore {
  constructor(inPath) {
    super();
    this._inPath = inPath;
  }

  async fetch(address) {
    const URL = require("url");
    const url = URL.parse(address);
    let content = null;
    if (url.protocol === 'ng-cli:') {
      let filePath = path.join(__dirname, '../packages/angular/cli', url.hostname, url.path);
      content = fs.readFileSync(filePath, 'utf-8').trim();
    } else if (url.hostname) {
      try {
        const fetch = require("node-fetch");
        const response = await fetch(address);
        content = response.text();
      } catch (e) {
        content = null;
      }
    }

    if (content === null && !path.isAbsolute(address)) {
      const resolvedPath = path.join(path.dirname(this._inPath), address);

      // Check relative to inPath
      if (fs.existsSync(resolvedPath)) {
        content = fs.readFileSync(resolvedPath, 'utf-8');
      }
    }

    if (content === null && fs.existsSync(address)) {
      content = fs.readFileSync(address, 'utf-8').trim();
    }

    if (content == null) {
      throw new Error(`Address ${JSON.stringify(address)} cannot be resolved.`);
    }

    return qtCore.parseJSON(content, "JSON Schema", address);
  }
}


/**
 * Create the TS file from the schema, and overwrite the outPath (or log).
 * @param {string} inPath 
 * @param {string} outPath 
 */
async function main(inPath, outPath) {
  const content = await generate(inPath);

  if (outPath === '-') {
    console.log(content);
    process.exit(0);
  }

  const buildWorkspaceDirectory = process.env['BUILD_WORKSPACE_DIRECTORY'] || '.';
  outPath = path.resolve(buildWorkspaceDirectory, outPath);
  fs.writeFileSync(outPath, content, 'utf-8');
}


async function generate(inPath) {
  // Best description of how to use the API was found at
  //   https://blog.quicktype.io/customizing-quicktype/
  const inputData = new qtCore.InputData();
  const source = { name: 'Schema', schema: fs.readFileSync(inPath, 'utf-8') };

  await inputData.addSource('schema', source, () => {
    return new qtCore.JSONSchemaInput(new FetchingJSONSchemaStore(inPath));
  });

  const lang = new qtCore.TypeScriptTargetLanguage();

  const { lines } = await qtCore.quicktype({
    lang,
    inputData,
    alphabetizeProperties: true,
    src: [inPath],
    rendererOptions: {
      'just-types': true,
      'explicit-unions': true,
    }
  });

  return header + lines.join('\n') + footer;
}

// Parse arguments and run main().
const argv = process.argv.slice(2);
if (argv.length < 2 || argv.length > 3) {
  console.error('Must include 2 or 3 arguments.');
  process.exit(1);
}

main(...argv)
  .then(() => process.exit(0))
  .catch(err => {
    console.error('An error happened:');
    console.error(err);
    process.exit(127);
  });
